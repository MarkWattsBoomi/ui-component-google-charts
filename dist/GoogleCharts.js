!function(e){function t(o){if(r[o])return r[o].exports;var n=r[o]={i:o,l:!1,exports:{}};return e[o].call(n.exports,n,n.exports,t),n.l=!0,n.exports}var r={};t.m=e,t.c=r,t.d=function(e,r,o){t.o(e,r)||Object.defineProperty(e,r,{configurable:!1,enumerable:!0,get:o})},t.n=function(e){var r=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(r,"a",r),r},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=1)}([function(e,t){e.exports=React},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}(r(2))},function(e,t,r){"use strict";var o=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])};return function(t,r){function o(){this.constructor=t}e(t,r),t.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}();Object.defineProperty(t,"__esModule",{value:!0});var n=r(0),a=r(3),s=function(e){function t(t){return e.call(this,t)||this}return o(t,e),t.prototype.onSearchChanged=function(e){this.props.isDesignTime||(manywho.state.setComponent(this.props.id,{search:e.target.value},this.props.flowKey,!0),this.forceUpdate())},t.prototype.onSearchEnter=function(e){13!=e.keyCode||this.props.isDesignTime||(e.stopPropagation(),this.search())},t.prototype.search=function(){if(!this.props.isDesignTime){var e=manywho.model.getComponent(this.props.id,this.props.flowKey),t=manywho.state.getComponent(this.props.id,this.props.flowKey);if(this.clearSelection(),e.objectDataRequest)manywho.engine.objectDataRequest(this.props.id,e.objectDataRequest,this.props.flowKey,manywho.settings.global("paging.table"),t.search,null,null,t.page);else{var r=(manywho.component.getDisplayColumns(e.columns)||[]).map(function(e){return e.typeElementPropertyId.toLowerCase()});this.setState({objectData:e.objectData.filter(function(e){return e.properties.filter(function(e){return-1!=r.indexOf(e.typeElementPropertyId)&&-1!=e.contentValue.toLowerCase().indexOf(t.search.toLowerCase())}).length>0})}),t.page=1,manywho.state.setComponent(this.props.id,t,this.props.flowKey,!0)}}},t.prototype.refresh=function(){this.props.isDesignTime||(manywho.state.setComponent(this.props.id,{search:""},this.props.flowKey,!0),this.search())},t.prototype.clearSelection=function(){this.setState({selectedRows:[]}),manywho.state.setComponent(this.props.id,{objectData:[]},this.props.flowKey,!0)},t.prototype.onRowClicked=function(e){var t=this.state.selectedRows,r=manywho.model.getComponent(this.props.id,this.props.flowKey);-1==t.indexOf(e.currentTarget.id)?r.isMultiSelect?t.push(e.currentTarget.id):t=[e.currentTarget.id]:t.splice(t.indexOf(e.currentTarget.id),1),this.setState({selectedRows:t}),manywho.state.setComponent(this.props.id,{objectData:manywho.component.getSelectedRows(r,t)},this.props.flowKey,!0)},t.prototype.onOutcome=function(e,t){var r=manywho.model.getComponent(this.props.id,this.props.flowKey);manywho.state.setComponent(r.id,{objectData:manywho.component.getSelectedRows(r,[e])},this.props.flowKey,!0);var o=this.props.flowKey,n=manywho.model.getOutcome(t,this.props.flowKey);manywho.engine.move(n,this.props.flowKey).then(function(){n.isOut&&manywho.engine.flowOut(n,o)})},t.prototype.onNext=function(){var e=manywho.model.getComponent(this.props.id,this.props.flowKey),t=manywho.state.getComponent(this.props.id,this.props.flowKey);t.page||(t.page=1),t.page++,manywho.state.setComponent(this.props.id,t,this.props.flowKey,!0),e.objectDataRequest||e.fileDataRequest?this.search():e.attributes.pagination&&manywho.utils.isEqual(e.attributes.pagination,"true",!0)&&this.forceUpdate()},t.prototype.onPrev=function(){var e=manywho.model.getComponent(this.props.id,this.props.flowKey),t=manywho.state.getComponent(this.props.id,this.props.flowKey);t.page--,manywho.state.setComponent(this.props.id,t,this.props.flowKey,!0),e.objectDataRequest||e.fileDataRequest?this.search():e.attributes.pagination&&manywho.utils.isEqual(e.attributes.pagination,"true",!0)&&this.forceUpdate()},t.prototype.getInitialState=function(){var e={};return e.selectedRows=[],e.windowWidth=window.innerWidth,e.sortByOrder="ASC",e.lastOrderBy="",e.objectData=null,e},t.prototype.componentWillMount=function(){var e=manywho.model.getComponent(this.props.id,this.props.flowKey);e.objectDataRequest||this.setState({objectData:e.objectData})},t.prototype.componentDidMount=function(){},t.prototype.componentWillReceiveProps=function(e){var t=manywho.model.getComponent(e.id,e.flowKey),r=this.props.isDesignTime?{error:null,loading:!1}:manywho.state.getComponent(this.props.id,this.props.flowKey)||{};t.objectDataRequest||t.fileDataRequest||!manywho.utils.isNullOrWhitespace(r.search)||!manywho.utils.isNullOrWhitespace(r.page)&&1!=r.page||this.setState({objectData:t.objectData})},t.prototype.componentWillUnmount=function(){},t.prototype.render=function(){manywho.log.info("Rendering Google Chart: "+this.props.id);var e=manywho.model.getComponent(this.props.id,this.props.flowKey),t=this.props.isDesignTime?{error:null,loading:!1}:manywho.state.getComponent(this.props.id,this.props.flowKey)||{};this.outcomes=manywho.model.getOutcomes(this.props.id,this.props.flowKey);var r=this.props.isDesignTime?[]:e.objectData;e.objectData&&t.objectData&&!this.state.objectData&&(r=e.objectData.map(function(e){var r=t.objectData.filter(function(t){return manywho.utils.isEqual(e.externalId,t.externalId)&&manywho.utils.isEqual(e.internalId,t.internalId)})[0];return r?manywho.utils.extend({},[e,r]):e}));var o=this.props.isDesignTime?[]:this.getDisplayColumns(e.columns,this.outcomes),a=e.objectDataRequest&&e.objectDataRequest.hasMoreResults||e.fileDataRequest&&e.fileDataRequest.hasMoreResults,s=null,i=this.outcomes.filter(function(e){return!e.isBulkAction}),l=this.outcomes.filter(function(e){return e.isBulkAction});t.objectData&&(r=t.objectData),s=t.error?n.createElement("div",{className:"table-error"},n.createElement("p",{className:"lead"},"state.error.message"),n.createElement("button",{className:"btn btn-danger",onClick:this.search},"Retry")):0==o.length?n.createElement("div",{className:"table-error"},n.createElement("p",{className:"lead"},"'No display columns have been defined for this table'")):this.renderChart(r||[],i,o);var p=[];if(0!=e.isVisible){p=p.concat(manywho.styling.getClasses(this.props.parentId,this.props.id,"google-chart",this.props.flowKey)),p=e.attributes&&e.attributes.classes?p.join(" ")+" "+e.attributes.classes:p.join(" ");void 0!==e.isValid&&0==e.isValid&&n.createElement("div",{className:"has-error"},n.createElement("span",{className:"help-block"},e.validationMessage)),0==e.isVisible&&(p+=" hidden");var c=[];return c.push(this.renderHeader(t.search,l,this.props.flowKey,e.isSearchable,this.onSearchChanged,this.onSearchEnter,this.search,e.objectDataRequest||e.fileDataRequest,this.refresh,this.props.isDesignTime,e)),c.push(s),c.push(this.renderFooter(t.page||1,a,this.onNext,this.onPrev,this.props.isDesignTime)),c.push(this.renderWait()),n.createElement("div",{className:p},n.createElement("div",{className:"panel panel-default"},n.createElement("div",{className:"panel-heading"},n.createElement("div",{className:"panel-body"},n.createElement("div",null,c)))))}p.push("hidden")},t.prototype.parseBoolean=function(e){return 1==e||0==e?e:null!=e&&"true"==e.toLowerCase()},t.prototype.convertToGoogleType=function(e){var t="string";return null!=e&&(e=e.toUpperCase())==manywho.component.contentTypes.number&&(t="number"),t},t.prototype.getDisplayColumns=function(e,t){var r=manywho.component.getDisplayColumns(e)||[];return t.filter(function(e){return!e.isBulkAction}).length>0&&r.unshift("mw-outcomes"),r},t.prototype.areBulkActionsDefined=function(e){return 0!=e.filter(function(e){return e.isBulkAction}).length},t.prototype.renderHeader=function(e,t,r,o,a,s,i,l,p,c,u){var h,d,f,m=manywho.utils.getLookUpKey(r),g=[],y=document.getElementById(m);if(l&&null!=u.attributes&&1==this.parseBoolean(u.attributes.enableRefresh)||l&&null==u.attributes){var b=!1;c&&(b=!0),f=n.createElement("button",{className:"btn btn-sm btn-default table-refresh",onClick:p,disabled:b},n.createElement("span",{className:"glyphicon glyphicon-refresh"}))}if(o){var v=!1;c&&(v=!0),h=n.createElement("div",{className:"input-group table-search"},n.createElement("input",{type:"text",className:"form-control",value:e,placeholder:"Search",onChange:a,onKeyUp:s},n.createElement("span",{className:"input-group-btn"},n.createElement("button",{className:"btn btn-default",onClick:i,disabled:v},n.createElement("span",{className:"glyphicon glyphicon-search"})))))}if(t){var w=t.map(function(e){return n.createElement(manywho.component.getByName("outcome"),{id:e.id,flowKey:r})});d=n.createElement("div",{className:"table-outcomes"},w)}return g=y&&y.clientWidth<768?[d,h,f]:[f,h,d],g.length>0?n.createElement("div",{className:"table-header clearfix"},g):null},t.prototype.renderFooter=function(e,t,r,o,a){var s=[];return(e>1||t)&&s.push(n.createElement(manywho.component.getByName("pagination"),{pageIndex:e,hasMoreResults:t,containerClasses:"pull-right",onNext:r,onPrev:o,isDesignTime:a})),s.length>0?n.createElement("div",{className:"table-footer clearfix"},s):null},t.prototype.renderChart=function(e,t,r){var o=manywho.model.getComponent(this.props.id,this.props.flowKey),s=[],i=[];if(null!=r&&r.length>0)for(var l=0;l<r.length;l++)i.push(r[l].label);if(s.push(i),null!=e&&e.length>0)for(var l=0;l<e.length;l++)if(null!=e[l].properties&&e[l].properties.length==i.length){for(var p=[],c=0;c<r.length;c++)for(var u=0;u<e[l].properties.length;u++)if(e[l].properties[u].typeElementPropertyId==r[c].typeElementPropertyId){if("number"==this.convertToGoogleType(r[c].contentType)){var h=parseFloat(e[l].properties[u].contentValue);1==isNaN(h)&&(h=0),p.push(h)}else p.push(e[l].properties[u].contentValue);break}s.push(p)}var d;if(o.attributes){var f={};for(var m in o.attributes)switch(m){case"chart":var g=this.chartNameToType(o.attributes[m]);d=g.name;for(var y in g.options)f[y]=g.options[y];break;case"classes":break;default:f[m]=o.attributes[m]}}else d="PieChart";return n.createElement("div",{id:this.props.id},n.createElement(a.default,{chartType:d,width:"100%",height:"100%",legendToggle:!0,data:s,options:f}))},t.prototype.renderWait=function(){},t.prototype.chartNameToType=function(e){var t={name:"",options:{}};switch(e.toLowerCase()){case"annotation":t.name="AnnotationChart";break;case"area":t.name="AreaChart";break;case"bar":t.name="BarChart";break;case"bubble":t.name="BubbleChart";break;case"calendar":t.name="Calendar";break;case"candlestick":t.name="CandlestickChart";break;case"column":t.name="ColumnChart";break;case"gantt":t.name="Gannt";break;case"gauge":t.name="Gauge";break;case"geo":t.name="GeoChart";break;case"line":t.name="LineChart";break;case"org":t.name="OrgChart";break;case"pie":t.name="PieChart";break;case"sankey":t.name="Sankey";break;case"scatter":t.name="ScatterChart";break;case"steppedarea":t.name="SteppedAreaChart";break;case"table":t.name="Table";break;case"timelines":t.name="TimeLine";break;case"treemap":t.name="TreeMap";break;case"trend":t.options.trendlines={0:{}},t.name="ScatterChart";break;case"wordtree":t.options.wordtree={format:"implicit",word:"cats"},t.name="WordTree";break;default:t.name="PieChart"}return t},t}(n.Component);manywho.component.register("GoogleChart",s),t.default=s},function(e,t,r){"use strict";function o(e,t){function r(){this.constructor=e}l(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}function n(e,t,r,o){return new(r||(r=Promise))(function(n,a){function s(e){try{l(o.next(e))}catch(e){a(e)}}function i(e){try{l(o.throw(e))}catch(e){a(e)}}function l(e){e.done?n(e.value):new r(function(t){t(e.value)}).then(s,i)}l((o=o.apply(e,t||[])).next())})}function a(e,t){function r(e){return function(t){return o([e,t])}}function o(r){if(n)throw new TypeError("Generator is already executing.");for(;l;)try{if(n=1,a&&(s=2&r[0]?a.return:r[0]?a.throw||((s=a.return)&&s.call(a),0):a.next)&&!(s=s.call(a,r[1])).done)return s;switch(a=0,s&&(r=[2&r[0],s.value]),r[0]){case 0:case 1:s=r;break;case 4:return l.label++,{value:r[1],done:!1};case 5:l.label++,a=r[1],r=[0];continue;case 7:r=l.ops.pop(),l.trys.pop();continue;default:if(s=l.trys,!(s=s.length>0&&s[s.length-1])&&(6===r[0]||2===r[0])){l=0;continue}if(3===r[0]&&(!s||r[1]>s[0]&&r[1]<s[3])){l.label=r[1];break}if(6===r[0]&&l.label<s[1]){l.label=s[1],s=r;break}if(s&&l.label<s[2]){l.label=s[2],l.ops.push(r);break}s[2]&&l.ops.pop(),l.trys.pop();continue}r=t.call(e,l)}catch(e){r=[6,e],a=0}finally{n=s=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}var n,a,s,i,l={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return i={next:r(0),throw:r(1),return:r(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i}Object.defineProperty(t,"__esModule",{value:!0}),r.d(t,"Chart",function(){return y});var s=r(0),i=(r.n(s),r(4)),l=(r.n(i),function(e,t){return(l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)}),p=function(){return p=Object.assign||function(e){for(var t,r=1,o=arguments.length;r<o;r++){t=arguments[r];for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])}return e},p.apply(this,arguments)},c=["#3366CC","#DC3912","#FF9900","#109618","#990099","#3B3EAC","#0099C6","#DD4477","#66AA00","#B82E2E","#316395","#994499","#22AA99","#AAAA11","#6633CC","#E67300","#8B0707","#329262","#5574A6","#3B3EAC"],u=function(e){function t(t){var r=e.call(this,t)||this,o=document.getElementsByTagName("script");r.loadScript=!0;for(var n=0;n<o.length;n+=1)o[n].src.includes("gstatic.com/charts/loader.js")&&(r.loadScript=!1);return r}return o(t,e),t.prototype.componentDidMount=function(){!1===this.loadScript&&this.props.onLoad()},t.prototype.render=function(){var e=this.props,t=e.onError,r=e.onLoad;return!0===this.loadScript?Object(s.createElement)(i,{url:"https://www.gstatic.com/charts/loader.js",onError:function(){t()},onLoad:r}):null},t}(s.Component),h="#CCCCCC",d=0,f=function(){return"reactgooglegraph-"+(d+=1)},m={graph_id:null,legend_toggle:!1,graphID:null,options:{colors:null},data:null,rows:null,columns:null,diffdata:null,chartEvents:null,legendToggle:!1,chartActions:null,getChartWrapper:function(e,t){},className:"",style:{},formatters:null,spreadSheetUrl:null,spreadSheetQueryParameters:{headers:1,gid:1},rootProps:{}},g=function(e,t,r){return void 0===r&&(r={}),n(void 0,void 0,void 0,function(){return a(this,function(o){return[2,new Promise(function(o,n){var a=r.headers?"headers="+r.headers:"headers=0",s=r.query?"&tq="+encodeURIComponent(r.query):"",i=r.gid?"&gid="+r.gid:"",l=r.sheet?"&sheet="+r.sheet:"",p=""+a+i+l+s,c=t+"/gviz/tq?"+p;new e.visualization.Query(c).send(function(e){e.isError()?n("Error in query:  "+e.getMessage()+" "+e.getDetailedMessage()):o(e.getDataTable())})})]})})},y=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.state={loadingStatus:"loading",google:null,hiddenColumns:[]},t.graphID=null,t.chartWrapper=null,t.getGraphID=function(){var e,r=t.props,o=r.graphID,n=r.graph_id;return e=null===o&&null===n?null===t.graphID?f():t.graphID:null!==o&&null===n?o:null!==n&&null===o?n:o,t.graphID=e,t.graphID},t.draw=function(){return n(t,void 0,void 0,function(){var e,t,r,o,n,s,i,l,p,c,u,h,d,f,m,y,b,v,w,C,D,T,E;return a(this,function(a){switch(a.label){case 0:return null===this.chartWrapper||null===this.state.google?[2]:(e=this.props,t=e.data,r=e.diffdata,o=e.columns,n=e.rows,s=e.options,i=e.legend_toggle,l=e.legendToggle,p=e.chartType,c=e.formatters,u=e.spreadSheetUrl,h=e.spreadSheetQueryParameters,f=null,null!==r&&(m=this.state.google.visualization.arrayToDataTable(r.old),y=this.state.google.visualization.arrayToDataTable(r.new),f=this.state.google.visualization[p].prototype.computeDiff(m,y)),null===t?[3,1]:(d=Array.isArray(t)?this.state.google.visualization.arrayToDataTable(t):new this.state.google.visualization.DataTable(t),[3,5]));case 1:return null===n||null===o?[3,2]:(d=this.state.google.visualization.arrayToDataTable([o].concat(n)),[3,5]);case 2:return null===u?[3,4]:[4,g(this.state.google,u,h)];case 3:return d=a.sent(),[3,5];case 4:d=this.state.google.visualization.arrayToDataTable([]),a.label=5;case 5:for(b=d.getNumberOfColumns(),v=0;v<b;v+=1)w=this.getColumnID(d,v),this.state.hiddenColumns.includes(w)&&(C=d.getColumnLabel(v),D=d.getColumnId(v),T=d.getColumnType(v),d.removeColumn(v),d.addColumn({label:C,id:D,type:T}));return E=this.chartWrapper.getChart(),"Timeline"===this.chartWrapper.getChartType()&&E&&E.clearChart(),this.chartWrapper.setOptions(s),this.chartWrapper.setDataTable(d),this.chartWrapper.draw(),null!==f&&(this.chartWrapper.setDataTable(f),this.chartWrapper.draw()),null!==c&&(this.applyFormatters(d,c),this.chartWrapper.setDataTable(d),this.chartWrapper.draw()),!0!==l&&!0!==i||this.grayOutHiddenColumns(),[2]}})})},t.applyFormatters=function(e,r){if(null!==t.state.google)for(var o=0,n=r;o<n.length;o++){var a=n[o];switch(a.type){case"ArrowFormat":var s=new t.state.google.visualization.ArrowFormat(a.options);s.format(e,a.column);break;case"BarFormat":var s=new t.state.google.visualization.BarFormat(a.options);s.format(e,a.column);break;case"ColorFormat":for(var s=new t.state.google.visualization.ColorFormat(a.options),i=a.ranges,l=0,p=i;l<p.length;l++){var c=p[l];s.addRange.apply(s,c)}s.format(e,a.column);break;case"DateFormat":var s=new t.state.google.visualization.DateFormat(a.options);s.format(e,a.column);break;case"NumberFormat":var s=new t.state.google.visualization.NumberFormat(a.options);s.format(e,a.column);break;case"PatternFormat":var s=new t.state.google.visualization.PatternFormat(a.options);s.format(e,a.column)}}},t.grayOutHiddenColumns=function(){if(null!==t.chartWrapper&&null!==t.state.google){var e=t.chartWrapper.getDataTable();if(null!==e){var r=e.getNumberOfColumns();if(!1!==t.state.hiddenColumns.length>0){var o=t.props.options,n=Array.from({length:r-1}).map(function(r,n){var a=t.getColumnID(e,n+1);return t.state.hiddenColumns.includes(a)?h:void 0!==o.colors&&null!==o.colors?o.colors[n]:c[n]});t.chartWrapper.setOptions(p({},t.props.options,{colors:n})),t.chartWrapper.draw()}}}},t.onResize=function(){null!==t.chartWrapper&&t.chartWrapper.draw()},t.setChartActions=function(e,r){if(null!==t.chartWrapper){for(var o=t.chartWrapper.getChart(),n=0,a=r;n<a.length;n++){var s=a[n];o.removeAction(s.id)}for(var i=0,l=e;i<l.length;i++){var s=l[i];!function(e){o.setAction({id:e.id,text:e.text,action:function(){return e.action(t.chartWrapper)}})}(s)}}},t.getColumnID=function(e,t){return e.getColumnId(t)||e.getColumnLabel(t)},t.listenToChartEvents=function(){if(null!==t.state.google&&null!==t.chartWrapper){t.state.google.visualization.events.removeAllListeners(t.chartWrapper);var e=t.props,r=e.chartEvents,o=e.legend_toggle,n=e.legendToggle;if(null!==r)for(var a=0,s=r;a<s.length;a++){var i=s[a];!function(e){var r=e.eventName,o=e.callback;t.state.google.visualization.events.addListener(t.chartWrapper,r,function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];null!==t.chartWrapper&&null!==t.state.google&&o({chartWrapper:t.chartWrapper,props:t.props,google:t.state.google,state:t.state,eventArgs:e})})}(i)}!0!==n&&!0!==o||t.listenToLegendToggle()}},t.listenToLegendToggle=function(){null!==t.state.google&&null!==t.chartWrapper&&t.state.google.visualization.events.addListener(t.chartWrapper,"select",function(){if(null!==t.chartWrapper){var e=t.chartWrapper.getChart(),r=e.getSelection(),o=t.chartWrapper.getDataTable();if(0!==r.length&&null===r[0].row&&null!==o){var n=r[0].column,a=t.getColumnID(o,n);t.state.hiddenColumns.includes(a)?t.setState(function(e){return p({},e,{hiddenColumns:e.hiddenColumns.filter(function(e){return e!==a}).slice()})},function(){t.draw()}):t.setState(function(e){return p({},e,{hiddenColumns:e.hiddenColumns.concat([a])})},function(){t.draw()})}}})},t.handleGoogleChartsLoaderScriptLoaded=function(e){var r=t.props,o=r.chartVersion,n=r.chartPackages,a=r.chartLanguage,s=r.mapsApiKey;e.charts.load(o||"current",{packages:n||["corechart"],language:a||"en",mapsApiKey:s}),e.charts.setOnLoadCallback(function(){t.setState(function(t){return p({},t,{loadingStatus:"ready",google:e})})})},t.handleGoogleChartsLoaderScriptErrored=function(){t.setState(function(e){return p({},e,{loadingStatus:"errored"})})},t}return o(t,e),t.prototype.componentDidMount=function(){this.setState({loadingStatus:"loading"}),window.addEventListener("resize",this.onResize)},t.prototype.componentDidUpdate=function(e,t){var r=this.props;if("ready"!==t.loadingStatus&&"ready"===this.state.loadingStatus&&null!==this.state.google){var o={chartType:this.props.chartType,options:this.props.options,containerId:this.getGraphID()};return this.chartWrapper=new this.state.google.visualization.ChartWrapper(o),this.listenToChartEvents(),this.draw(),void r.getChartWrapper(this.chartWrapper,this.state.google)}r.chartEvents!==e.chartEvents&&this.listenToChartEvents(),null===r.chartActions&&null===e.chartActions||r.chartActions!==e.chartActions&&this.setChartActions(r.chartActions,e.chartActions),r.data!==e.data&&this.draw(),r.rows===e.rows&&r.columns===e.columns||this.draw()},t.prototype.componentWillUnmount=function(){null!==this.chartWrapper&&null!==this.state.google&&(window.removeEventListener("resize",this.onResize),this.state.google.visualization.events.removeAllListeners(this.chartWrapper),"Timeline"===this.chartWrapper.getChartType()&&this.chartWrapper.getChart()&&this.chartWrapper.getChart().clearChart())},t.prototype.render=function(){var e=this,t=p({height:this.props.height||this.props.options&&this.props.options.height,width:this.props.width||this.props.options&&this.props.options.width},this.props.style);return Object(s.createElement)("div",p({id:this.getGraphID(),style:t,className:this.props.className},this.props.rootProps),Object(s.createElement)(u,{onError:this.handleGoogleChartsLoaderScriptErrored,onLoad:function(){var t=window;t.google&&e.handleGoogleChartsLoaderScriptLoaded(t.google)}}),"loading"===this.state.loadingStatus&&(this.props.loader?this.props.loader:"Rendering Chart..."))},t.defaultProps=m,t}(s.Component);t.default=y},function(e,t,r){"use strict";function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var r=0;r<t.length;r++){var o=t[r];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,r,o){return r&&e(t.prototype,r),o&&e(t,o),t}}(),l=r(0),p=function(e){return e&&e.__esModule?e:{default:e}}(l),c=r(5),u=function(e){function t(e){n(this,t);var r=a(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return r.scriptLoaderId="id"+r.constructor.idCount++,r}return s(t,e),i(t,[{key:"componentDidMount",value:function(){var e=this.props,t=e.onError,r=e.onLoad,n=e.url;return this.constructor.loadedScripts[n]?void r():this.constructor.erroredScripts[n]?void t():this.constructor.scriptObservers[n]?void(this.constructor.scriptObservers[n][this.scriptLoaderId]=this.props):(this.constructor.scriptObservers[n]=o({},this.scriptLoaderId,this.props),void this.createScript())}},{key:"componentWillUnmount",value:function(){var e=this.props.url,t=this.constructor.scriptObservers[e];t&&delete t[this.scriptLoaderId]}},{key:"createScript",value:function(){var e=this,t=this.props,r=t.onCreate,o=t.url,n=t.attributes,a=document.createElement("script");r(),n&&Object.keys(n).forEach(function(e){return a.setAttribute(e,n[e])}),a.src=o,a.hasAttribute("async")||(a.async=1);var s=function(t){var r=e.constructor.scriptObservers[o];Object.keys(r).forEach(function(n){t(r[n])&&delete e.constructor.scriptObservers[o][e.scriptLoaderId]})};a.onload=function(){e.constructor.loadedScripts[o]=!0,s(function(e){return e.onLoad(),!0})},a.onerror=function(){e.constructor.erroredScripts[o]=!0,s(function(e){return e.onError(),!0})},document.body.appendChild(a)}},{key:"render",value:function(){return null}}]),t}(p.default.Component);u.propTypes={attributes:c.PropTypes.object,onCreate:c.PropTypes.func,onError:c.PropTypes.func.isRequired,onLoad:c.PropTypes.func.isRequired,url:c.PropTypes.string.isRequired},u.defaultProps={attributes:{},onCreate:function(){},onError:function(){},onLoad:function(){}},u.scriptObservers={},u.loadedScripts={},u.erroredScripts={},u.idCount=0,t.default=u,e.exports=t.default},function(e,t,r){e.exports=r(6)()},function(e,t,r){"use strict";var o=r(7),n=r(8),a=r(9);e.exports=function(){function e(e,t,r,o,s,i){i!==a&&n(!1,"Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types")}function t(){return e}e.isRequired=e;var r={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t};return r.checkPropTypes=o,r.PropTypes=r,r}},function(e,t,r){"use strict";function o(e){return function(){return e}}var n=function(){};n.thatReturns=o,n.thatReturnsFalse=o(!1),n.thatReturnsTrue=o(!0),n.thatReturnsNull=o(null),n.thatReturnsThis=function(){return this},n.thatReturnsArgument=function(e){return e},e.exports=n},function(e,t,r){"use strict";function o(e,t,r,o,a,s,i,l){if(n(t),!e){var p;if(void 0===t)p=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[r,o,a,s,i,l],u=0;p=new Error(t.replace(/%s/g,function(){return c[u++]})),p.name="Invariant Violation"}throw p.framesToPop=1,p}}var n=function(e){};e.exports=o},function(e,t,r){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,